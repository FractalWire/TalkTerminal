#!/bin/bash
# TalkTerminal (tt)
# A layer around dtach that add some simple functionality
# Copyright (C) 2017  Olivier G-R (olivier@fractalwire.io)

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


readonly BASE_DIR="$HOME/.config/tt"
readonly ACTION_DIR="$BASE_DIR/actions"
readonly DEFAULT_DTACH_OPTIONS=''
readonly DEFAULT_DTACH_CMD='bash -i'
readonly DEFAULT_DTACH_ENDING="$DEFAULT_DTACH_OPTIONS${DEFAULT_DTACH_OPTIONS:+ }$DEFAULT_DTACH_CMD"

usage(){
    echo -e "Usage :"
    echo -e "\ttt list"
    echo -e "\ttt whoami"
    echo -e "\ttt help"
    echo -e "\ttt sync [options] <socket>"
    echo -e "\ttt clr <socket>"
    echo -e "\t(not implemented) tt filter <string|regexp>"
    echo -e "\ttt dt <dtach arguments>"
    echo -e
    echo -e "\ttalkTerminal (tt) is a small wrapper around dtach by Olivier G-R (olivier@fractalwire.io)"
    echo -e "\tIt's still very rough and might need some adjustement to fit your need."
    echo -e
    echo -e "\t<socket> corresponds to the name of a socket created by dtach in the $BASE_DIR"
    echo -e "\tdirectory."
    echo -e
    echo -e "\tThe sync command is used to synchronize multiple dtach session. To be more concise"
    echo -e "\tit puts a command (default 'cd $(pwd)') to the $ACTION_DIR/<socket>"
    echo -e "\tfile to be executed by the current dtach session whenever the <socket> dtach session"
    echo -e "\tsource this file."
    echo -e "\tThe clr command wipes clean the $ACTION_DIR/<socket> file."
    echo -e
    echo -e "\tThe dt command provides a wrapper around dtach, the difference is that the socket argument"
    echo -e "\tmust be a name not a path, tt handle the path for you. Also, there is a default command "
    echo -e "\texecuted if none is provided : '$DEFAULT_DTACH_ENDING'"
    echo -e
    echo -e "\tsync options :"
    echo -e
    echo -e "\t\t--command <command>"
    echo -e "\t\t-c <command>\tsynchronize current dtach session with the <socket>"
    echo -e "\t\t\t\tdtach session and execute <command> when a specific action"
    echo -e "\t\t\t\thappens on <socket> session"
    echo -e
    echo -e "\t\t--unsync"
    echo -e "\t\t-u\t\tunsync current dtach session with the <socket> dtach session"
    echo -e
}

# A simple wrapper around dtach
dt(){
    [[ -n "$1" && -n "$2" ]] \
        && echo "$2" | grep "/" \
        && echo "Bad socket name, no path require, only a name" >&2 \
        && return 1

    local mode="$1"
    local socket="$BASE_DIR/$2"

    # an array is needed for dtachEnding apparently
    local dtachEnding=

    shift 2

    case $mode in
        -a)
            dtachEnding=( ${@:-$DEFAULT_DTACH_OPTIONS} )
            ;;
        -p)
            dtachEnding=( $@ )
            ;;
        *)
            [[ -S $socket ]] \
                && echo "Socket name already in use, choose something else" >&2 \
                && return 1

            #init socket actions
            > "$ACTION_DIR/$2"

            dtachEnding=( ${@:-$DEFAULT_DTACH_ENDING} )
            ;;
    esac

    #echo dtach "$mode" "$socket" "${dtachEnding[@]}"
    dtach "$mode" "$socket" "${dtachEnding[@]}"\
        && return 0 \
        || return 1

}

# list all dtach socket available and specify which have been created by tt
list(){
    lsof -U \
        | tr -s " " \
        | sed -n "s/^dtach.*0t0 [0-9]* \([^ ]*\) type=STREAM$/\1/p" \
        | sed "s#\($BASE_DIR/\)\(.*\)#\1\2 (tt socket : \2)#p" \
        | sort | uniq
    return 0
}

# print the name of the current tt session
whoami(){
    local dtachParent=$(pstree -ps $$ | sed -n "s/.*dtach(\([0-9]*\)).*/\1/p")
    [[ -z $dtachParent ]] \
        && echo "This is not a dtach socket." >&2 \
        && return 1

    lsof -U \
        | grep $dtachParent \
        | tr -s " " \
        | sed -n "s/^dtach.*0t0 [0-9]* \([^ ]*\) type=STREAM$/\1/p" \
        | sed "s#$BASE_DIR/\(.*\)#\1#p" \
        | sort | uniq
    return 0
}

# sync with one tt socket
# should be enhanced
sync(){
    [[ -z "$1" ]] \
        && echo "No dtach socket provided" >&2 \
        && return 1

    local cmd='cd $(pwd)'
    local tmpFile="$BASE_DIR/tmp"

    case "$1" in
        -c|--command)
            [[ -z "$2" && -z "$3" ]] \
                && echo "Not enough argument for option -c" >&2 \
                && return 1
            cmd="$2"
            shift 2
            ;;
        -u|--unsync)
            unsync $2 || return 1
            return 0
            ;;
        *)
            ;;
    esac

    local actionFile="$ACTION_DIR/$1"
    local mySocketPath="$BASE_DIR/$(whoami)"

    [[ -e $actionFile ]] \
        && cat "$actionFile" | grep "$mySocketPath" > /dev/null \
        && unsync "$1"

    list | grep "$1" > /dev/null
    [[ $? -ne 0 ]] && echo "Bad socket name : $1" >&2 && return 1

    echo "syncing with $1 socket (cmd : '$cmd')"

    echo 'echo "'$cmd'" | dtach -p' $mySocketPath >> $actionFile
    sort $actionFile|uniq > $tmpFile
    mv $tmpFile $actionFile
    return 0
}

# stop listening for event coming from the specify socket
unsync() {

    local tmpFile="$BASE_DIR/tmp"

    [[ -z "$1" ]] \
        && echo "No socket provided to unsync" >&2 \
        && return 1

    list | grep "$1" > /dev/null
    [[ $? -ne 0 ]] && echo "Bad socket name : $1" >&2 && return 1

    actionFile="$ACTION_DIR/$1"

    echo "unsyncing with $1 socket"
    cat $actionFile |grep -v "$BASE_DIR/$(whoami)" > $tmpFile
    mv $tmpFile $actionFile
    return 0
}

clr() {
    [[ -z "$1" ]] \
        && echo "No socket provided" >&2 \
        && return 1

    > "$ACTION_DIR/$1"
}

main(){

    [[ ! -x $(command -v dtach) ]] \
        && echo "dtach program need to be installed" \
        && return 1

    [[ ! -d $HOME/.config/tt ]] \
        && mkdir -p $ACTION_DIR

    [[ -z $1 ]] \
        && echo "No command provided" >&2 \
        && usage \
        && return 1

    case $1 in
        list)
            echo "dtach sockets running :"
            list
            ;;
        whoami)
            echo "My tt socket name :"
            whoami
            ;;
        sync)
            shift
            sync "$@" && return 0 \
                || return 1
            ;;
        clr)
            shift
            clr "$@" && return 0 \
                || return 1
            ;;
        help)
            usage
            ;;
        dt)
            shift
            dt "$@"
            ;;
        *)
            echo "Bad command $@" >&2
            usage
            return 0
            ;;
    esac
}

main "$@" \
    && exit 0 \
    || exit 1
